/* http://www.nw-fva.de
   Version 25-02-2009

   (c) 2002 Juergen Nagel, Northwest German Forest Research Station, 
       Grätzelstr.2, 37079 Göttingen, Germany
       E-Mail: Juergen.Nagel@nw-fva.de
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT  WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */
package treegross.harvesting;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.ProcessingInstruction;
import org.jdom.output.XMLOutputter;
import org.jdom.input.*;
import org.jdom.DocType;
import java.util.*;
import java.text.*;
import java.net.*;
import treegross.base.*;
import java.io.*;


/**
 *
 * @author  nagel
 */
public class NutrientBalancePanel extends javax.swing.JPanel {

    NutrientBalanceSetting nbs[] = new NutrientBalanceSetting[50];
    LoggingSortiment ls[] = new LoggingSortiment[500];
    TimeEstimateFunction tef[] = new TimeEstimateFunction[150];
    NutrientBalanceLine nbl[] = new NutrientBalanceLine[50];
    int nnbs=0;
    int nls=0;
    int ntef=0;
    int nnbl = 0;
    static Document doc;
    static Element rootElt;
//    String urlString ="file:///C://Dokumente und Einstellungen//nagel//Eigene Dateien//jnProgramme//TreeGrOSSLogging//";
    String urlString ="";
    boolean combo5Active = true;
    Stand st = null;
    String urlcodebase = "";
    javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
    int nlist = 0;
    boolean neuspeichern = false;
    String fname="";
    String proDir;
    boolean dialogActive = true;
    String workDir = "";
    int timeframe = 0;
    double fellingHeight=0.3;
    
    /** Creates new form LoggingPanel */
    public NutrientBalancePanel(Stand stand, String programDir, boolean interActive, String workingDir) {
        initComponents();
        dialogActive = interActive;
        jPanel8.setVisible(interActive);
        proDir=programDir;
        workDir = workingDir;
        int m = programDir.toUpperCase().indexOf("FILE");
        int m2 = programDir.toUpperCase().indexOf("HTTP");
        String fname=programDir+System.getProperty("file.separator")+"loggingSortiment.xml";
        String fname2=programDir+System.getProperty("file.separator")+"EST_Zeiten_Jacke.xml";
        if ( m < 0 && m2 <0 ) fname="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")+System.getProperty("file.separator")+fname;
        if ( m < 0 && m2 <0 ) fname2="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")+System.getProperty("file.separator")+fname2;

        try{
          URL url = new URL(fname);
          loadls(url);
        }
        catch (IOException e){
            e.printStackTrace();
        }

       try{
          URL url = new URL(fname2);
          loadtef(url);
        }
        catch (IOException e){
            e.printStackTrace();
        }

        st = stand;
        fname=programDir+System.getProperty("file.separator")+"NutrientBalanceSettings.xml";
        if ( m < 0 && m2 <0 ) fname="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")+System.getProperty("file.separator")+fname;
        try{
          URL url = new URL(fname);
          loadnbs(url);
        }
        catch (IOException e){
            e.printStackTrace();
        }



        loadTableDf(st);
        loadTableAssortment(st);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(608, 221));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.BorderLayout());

        jPanel8.setBackground(new java.awt.Color(255, 255, 204));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel13.setText("TreeGrOSS xml Datei :");
        jPanel8.add(jLabel13);

        jTextField13.setPreferredSize(new java.awt.Dimension(511, 19));
        jPanel8.add(jTextField13);

        jButton5.setText("laden");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton5);

        add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Standortparameter", jPanel1);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Auswahl", "Sortiment", "Arten", "min Zopf", "min Mitt.D", "max Länge"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jPanel15.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Sortimente", jPanel15);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Einschlag", "Laubholz m³/ha", "Nadelholz m³/ha", "Sortimente", "Brennholz", "Restholz"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel14.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Durchforstungen", jPanel14);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Jahr", "Sortimente  t/ha", "Brennholz  t/ha", "Restholz  t/ha", "Gesamt t/ha"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        jPanel16.add(jScrollPane4, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Biomasseexport", jPanel16);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Nachieferung", "Entnahme ", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable4);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Nährstoffbilanz", jPanel2);

        add(jTabbedPane1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       
// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    
    public void savels(String fn){
/*       JFileChooser fc = new JFileChooser();
       TxtFileFilter txtFilter = new TxtFileFilter();
       txtFilter.setExtension("xml");
       fc.addChoosableFileFilter(txtFilter);
       int auswahl = fc.showOpenDialog(this);
       String pa= fc.getSelectedFile().getPath();
       String dn= fc.getSelectedFile().getName();
*/
       NumberFormat f=NumberFormat.getInstance();
       f=NumberFormat.getInstance(new Locale("en","US"));
       f.setMaximumFractionDigits(2);
       f.setMinimumFractionDigits(2);
       f.setGroupingUsed(false);
       Element elt;
       Element elt2;
/** Creates an Treegross xml */
       Document doc = new Document();
       rootElt = new Element("Sortimente");
       ProcessingInstruction pi = new ProcessingInstruction("xml-stylesheet",
                 "type=\"text/xsl\" href=\"loggingSortimente.xsl\"");
       doc.addContent(pi);
       doc.setRootElement(rootElt);
         
//         
/* Alle Sortimente */;
        for (int i=0;i< nlist;i++){
            elt = new Element("Sortiment");
            elt = addString(elt, "Id", new Integer(i).toString());
            elt = addString(elt, "Name",ls[i].name);
            elt = addString(elt, "Art_von", new Integer(ls[i].artvon).toString());
            elt = addString(elt, "Art_bis", new Integer(ls[i].artbis).toString());
            elt = addString(elt, "minD",f.format(ls[i].minD));
            elt = addString(elt, "maxD",f.format(ls[i].maxD));
            elt = addString(elt, "minTop",f.format(ls[i].minTop));
            elt = addString(elt, "maxTop",f.format(ls[i].maxTop));
            elt = addString(elt, "minH",f.format(ls[i].minH));
            elt = addString(elt, "maxH",f.format(ls[i].maxH));
            elt = addString(elt, "ZugabeProzent",f.format(ls[i].zugabeProzent));
            elt = addString(elt, "ZugabeCm",f.format(ls[i].zugabeCm));
            elt = addString(elt, "Preis",f.format(ls[i].preis));
            elt = addString(elt, "Gewicht",f.format(ls[i].gewicht));
            elt = addString(elt, "Wahrscheinlichkeit",f.format(ls[i].wahrscheinlich));
            elt = addString(elt, "nurZBaum",new Boolean(ls[i].nurZBaum).toString());
            elt = addString(elt, "mehrfach",new Boolean(ls[i].mehrfach).toString());
            elt = addString(elt, "Entnahme",new Boolean(ls[i].entnahme).toString());
            elt = addString(elt, "bisKA",new Boolean(ls[i].bisKronenansatz).toString());
            elt = addString(elt, "ausgewaehlt",new Boolean(ls[i].ausgewaehlt).toString());
            elt = addString(elt, "Zeitbedarfsfunktion", new Integer(ls[i].zeitFunktion).toString());
            rootElt.addContent(elt);
        }
/* Abspeichern des doc */
        try {
            File file = new File(fn);
            FileOutputStream result = new FileOutputStream(file);
            XMLOutputter outputter = new XMLOutputter();
//            outputter.setNewlines(true);
//            outputter.setIndent("  ");
            outputter.output(doc,result);
                        
        }
        catch (IOException e){
            e.printStackTrace();
        }
   

    }
     Element addString(Element elt, String variable, String text){
            Element var = new Element(variable);
            var.addContent(text);  
            elt.addContent(var);
            return elt;
    }

    public void calculate(){
       String pa="";
       String dn="";
// set Time frame
       timeframe = -9999;
// set felling height usually 0.3m
/*       fellingHeight=Double.parseDouble(jTextField16.getText());
       if (dialogActive){
           JFileChooser fc = new JFileChooser();
//       TxtFileFilter txtFilter = new TxtFileFilter();
//       txtFilter.setExtension("xml");
//     fc.addChoosableFileFilter(txtFilter);

           int auswahl = fc.showOpenDialog(this);
           pa= fc.getSelectedFile().getPath();
           dn= fc.getSelectedFile().getName();
       }
        else
            pa = workDir+System.getProperty("file.separator")+"sortierung.xml";
*/
// Sortierung
// Logging Sortimente nach ausgewaehlt bzw. nicht sortieren
        LoggingSortiment temp = new LoggingSortiment();
        for (int i=0;i< nls-1;i++)
           for (int j=i+1;j< nls;j++)
               if (ls[j].ausgewaehlt) {
                   temp=ls[i];
                   ls[i]=ls[j];
                   ls[j]=temp;
               }
// Festellen der Anzahl ausgewaehlter ls
         int nausgewaehlt = 0;
         for (int i=0;i< nls;i++) if (ls[i].ausgewaehlt) nausgewaehlt = nausgewaehlt +1;
//         System.out.println("ausgewählt: "+nausgewaehlt);
// ausgewaehlte Logging Sortimente nach Gewichtung sortieren
        for (int i=0;i< nausgewaehlt-1;i++)
           for (int j=i+1;j< nausgewaehlt;j++)
               if (ls[j].gewicht > ls[i].gewicht) {
                   temp=ls[i];
                   ls[i]=ls[j];
                   ls[j]=temp;
               }
// Sortierung
        JSortiererNFV sortierer = new JSortiererNFV(st.sp[0].spDef.taperFunctionXML);
// Taperfunction set
        for (int k=0;k<st.nspecies;k++) {
            st.sp[k].spDef.taperFunction=sortierer.getFunNumber(st.sp[k].code);
        }

        Biomass_Austria biomass_Austria = new Biomass_Austria();
            double sumv=0.0;
            double sumvt =0.0;
            double sumvn =0.0;

/*       for (int k=0;k<st.nspecies;k++) {
            elt = new Element("Art");
            elt = addString(elt, "Code", new Integer(st.sp[k].code).toString());

            for (int i=0;i<st.ntrees;i++)
                if (st.sp[k].code == st.tr[i].code &&
                ( (timeframe<st.tr[i].out&& timeframe < 0) ||
                  (timeframe==st.year && (st.tr[i].out<0 ||st.tr[i].out==st.year)) ||
                  (timeframe!=st.year && st.tr[i].out==timeframe) )) {
               double volumen=0.0;
               double volumenToth = 0.0;
               double volumenEntn = 0.0;
               double biomasse = 0.0;
// use stem volume function
               double vol =0.0;
               FunctionInterpreter fi = new FunctionInterpreter();
               if (st.tr[i].sp.spDef.stemVolumeFunctionXML.length()>5)
                   vol=fi.getValueForTree(st.tr[i], st.tr[i].sp.spDef.stemVolumeFunctionXML);
                 else vol = st.tr[i].v;
               double biomasseZweige = 0.0;
               double biomasseNadeln = 0.0;
               double biomasseNadelnOut = 0.0;
               double biomasseZweigeOut = 0.0;

               if (st.tr[i].code < 500 ) biomasse=Math.exp(-10.33+2.063*Math.log(st.tr[i].d)+0.863*Math.log(st.tr[i].h));
                else biomasse=Math.exp(-10.306+2.053*Math.log(st.tr[i].d)+0.765*Math.log(st.tr[i].h));

               if (st.tr[i].out < 0 ){
                     biomasseZweige = biomass_Austria.getBranchBM(st.tr[i]);
                     biomasseNadeln = biomass_Austria.getLeafBM(st.tr[i]);
               }
               if (st.tr[i].out > 0 && st.tr[i].outtype > 1 ){
                     biomasseZweigeOut = biomass_Austria.getBranchBM(st.tr[i]);
                     biomasseNadelnOut = biomass_Austria.getLeafBM(st.tr[i]);
               }

               if (st.tr[i].out < 0 ) volumen = vol;
                else {
                   if (st.tr[i].outtype==1) volumenToth = volumenToth + vol;
                    else { // Sotierung
// alle ausgewählten Sortimente durchlaufen
                       double startHeight=fellingHeight;
                       for (int j=0;j<nausgewaehlt;j++) {
                          double ran = Math.random() * 100.0;
                          if (st.tr[i].code >= ls[j].artvon && st.tr[i].code <= ls[j].artbis && ran <= ls[j].wahrscheinlich){
                            boolean logFound = true;
                            double endHeight = st.tr[i].h;
                            if (ls[j].bisKronenansatz) endHeight = st.tr[i].cb;
                            boolean logOk = true;
                            if (ls[j].nurZBaum && st.tr[i].crop == false) logOk = false;
                            while(logFound && logOk) {
                               logFound = sortierer.getAssortment(st.tr[i].sp.spDef.taperFunction , st.tr[i].d, 1.3, 0.0, 0.0, st.tr[i].h,
                                    startHeight, endHeight, ls[j].minD, ls[j].maxD, ls[j].minTop, ls[j].maxTop,
                                    ls[j].minH, ls[j].maxH, 0.0, ls[j].zugabeProzent, ls[j].zugabeCm);
                                if(logFound) {
// calculate volume by Huber
                                   double dmR_cm= sortierer.getADmB_cm();
                                   double doR_cm= sortierer.getADm_cm();
                                   double l_m = startHeight;
                                   l_m = sortierer.getALae_m();
                                   double vo1HmR = 0.0;
                                   vo1HmR = sortierer.getVolumeHuber(dmR_cm,l_m);
                                   double vo1HoR = sortierer.getVolumeHuber(doR_cm,l_m);
                                   double zeitbedarf = tef[ls[j].zeitFunktion].getTime(doR_cm)*vo1HoR;
// Prüfen , ob das Stück aus dem Wald genommen wird oder nicht
                                   if (ls[j].entnahme) volumenEntn = volumenEntn + vo1HmR;
                                       else volumenToth = volumenToth + vo1HmR;
// Sortimentsstücke nach xml
//
                                   elt3 = new Element("Sortiment");
                                   elt3 = addString(elt3, "Art",new Integer(st.tr[i].code).toString());
                                   elt3 = addString(elt3, "Baum_Nr",st.tr[i].no);
                                   elt3 = addString(elt3, "BHD",f.format(st.tr[i].d));
                                   elt3 = addString(elt3, "Name",ls[j].name);
                                   elt3 = addString(elt3, "Entnahmejahr",new Integer(st.tr[i].out).toString());
                                   elt3 = addString(elt3, "Entnahmetyp",new Integer(st.tr[i].outtype).toString());
                                   elt3 = addString(elt3, "Starthoehe",f.format(startHeight));
                                   elt3 = addString(elt3, "Laenge",f.format(l_m));
                                   elt3 = addString(elt3, "VolHuber_mR",f.format(vo1HmR*st.tr[i].fac/st.size));
                                   elt3 = addString(elt3, "VolHuber_oR",f.format(vo1HoR*st.tr[i].fac/st.size));
                                   elt3 = addString(elt3, "Zeitbedarf_minha",f.format(zeitbedarf*st.tr[i].fac/st.size));
                                   elt3 = addString(elt3, "D_mR",f.format(dmR_cm));
                                   rootElt.addContent(elt3);

                                   startHeight=startHeight + l_m;

                                }
                               if (ls[j].mehrfach == false) logFound = false; //Abbruch


                            }// while log found

                           } // Baumart
                        }   // for j
                 }
            }
//           if (volumenEntn > 0.0 || volumenToth > 0.0)
           BiomasseFaktoren bf = new BiomasseFaktoren();
           if (st.tr[i].out > 0 ) volumenToth = vol - volumenEntn;
           elt2 = new Element("Baum");
           elt2 = addString(elt2, "Nr",st.tr[i].no);
           elt2 = addString(elt2, "Baumart", new Integer(st.tr[i].code).toString());
           elt2 = addString(elt2, "BHD",f.format(st.tr[i].d));
           elt2 = addString(elt2, "Hoehe",f.format(st.tr[i].h));
           elt2 = addString(elt2, "KA",f.format(st.tr[i].cb));
           elt2 = addString(elt2, "v_lebend",f.format(volumen/st.size));
           elt2 = addString(elt2, "v_toth",f.format(volumenToth/st.size));
           elt2 = addString(elt2, "v_entnommen",f.format(volumenEntn/st.size));
           elt2 = addString(elt2, "Biomasse_lebend", f.format(volumen*bf.getFactor(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Biomasse_entn", f.format(volumenEntn*bf.getFactor(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Biomasse_toth", f.format(volumenToth*bf.getFactor(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Biomasse_Zweig", f.format(biomasseZweige/(1000.0*st.size)) );
           elt2 = addString(elt2, "Biomasse_Blatt", f.format(biomasseNadeln/(1000.0*st.size)) );
           elt2 = addString(elt2, "Biomasse_Zweig_ent", f.format(biomasseZweigeOut/(1000.0*st.size)) );
           elt2 = addString(elt2, "Biomasse_Blatt_ent", f.format(biomasseNadelnOut/(1000.0*st.size)) );
           elt2 = addString(elt2, "Ca_lebend", f.format(volumen*bf.getFactor(st.tr[i].code)*bf.getFactorCa(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Ca_entn", f.format(volumenEntn*bf.getFactor(st.tr[i].code)*bf.getFactorCa(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Ca_toth", f.format(volumenToth*bf.getFactor(st.tr[i].code)*bf.getFactorCa(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Ca_Zweig", f.format(biomasseZweige*bf.getFactorCaAst(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Ca_Blatt", f.format(biomasseNadeln*bf.getFactorCaBlatt(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Ca_Zweig_ent", f.format(biomasseZweigeOut*bf.getFactorCaAst(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Ca_Blatt_ent", f.format(biomasseNadelnOut*bf.getFactorCaBlatt(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "K_lebend", f.format(volumen*bf.getFactor(st.tr[i].code)*bf.getFactorK(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "K_entn", f.format(volumenEntn*bf.getFactor(st.tr[i].code)*bf.getFactorK(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "K_toth", f.format(volumenToth*bf.getFactor(st.tr[i].code)*bf.getFactorK(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "K_Zweig", f.format(biomasseZweige*bf.getFactorKAst(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "K_Blatt", f.format(biomasseNadeln*bf.getFactorKBlatt(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "K_Zweig_ent", f.format(biomasseZweigeOut*bf.getFactorKAst(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "K_Blatt_ent", f.format(biomasseNadelnOut*bf.getFactorKBlatt(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Mg_lebend", f.format(volumen*bf.getFactor(st.tr[i].code)*bf.getFactorMg(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Mg_entn", f.format(volumenEntn*bf.getFactor(st.tr[i].code)*bf.getFactorMg(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Mg_toth", f.format(volumenToth*bf.getFactor(st.tr[i].code)*bf.getFactorMg(st.tr[i].code)/st.size) );
           elt2 = addString(elt2, "Mg_Zweig", f.format(biomasseZweige*bf.getFactorMgAst(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Mg_Blatt", f.format(biomasseNadeln*bf.getFactorMgBlatt(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Mg_Zweig_ent", f.format(biomasseZweigeOut*bf.getFactorMgAst(st.tr[i].code)/(1000.0*st.size)) );
           elt2 = addString(elt2, "Mg_Blatt_ent", f.format(biomasseNadelnOut*bf.getFactorMgBlatt(st.tr[i].code)/(1000.0*st.size)) );
           elt.addContent(elt2);


           sumv = sumv +volumen;
           sumvt = sumvt + volumenToth;
           sumvn = sumvn + volumenEntn;
        }
          rootElt.addContent(elt);

       } // for k species

       }
		catch (Exception e)
		{	System.out.println(e);
		}


        try {
            File file = new File(pa);
            FileOutputStream result = new FileOutputStream(file);
            XMLOutputter outputter = new XMLOutputter();
//            outputter.setNewlines(true);
//            outputter.setIndent("  ");
            outputter.output(doc,result);
//
//
            if (dialogActive == false){
              String seite="file:"+System.getProperty("file.separator")+System.getProperty("file.separator")
                              +System.getProperty("file.separator")+pa;
              StartBrowser startBrowser = new StartBrowser(seite);
//              startBrowser.start();
            }



        }
        catch (IOException e){
            e.printStackTrace();
        }
*/

    }

    public void calculateNutrientBalance(){
        getTableDfSetting();
// Sortierung
// Logging Sortimente nach ausgewaehlt bzw. nicht sortieren
        LoggingSortiment temp = new LoggingSortiment();
        for (int i=0;i< nls-1;i++)
           for (int j=i+1;j< nls;j++)
               if (ls[j].ausgewaehlt) {
                   temp=ls[i];
                   ls[i]=ls[j];
                   ls[j]=temp;
               }
// Festellen der Anzahl ausgewaehlter ls
         int nausgewaehlt = 0;
         for (int i=0;i< nls;i++) if (ls[i].ausgewaehlt) nausgewaehlt = nausgewaehlt +1;
// ausgewaehlte Logging Sortimente nach Gewichtung sortieren
        for (int i=0;i< nausgewaehlt-1;i++)
           for (int j=i+1;j< nausgewaehlt;j++)
               if (ls[j].gewicht > ls[i].gewicht) {
                   temp=ls[i];
                   ls[i]=ls[j];
                   ls[j]=temp;
               }
// Sortierung
        JSortiererNFV sortierer = new JSortiererNFV(nbs[0].taperFuctionClass);
        FunctionInterpreter fi = new FunctionInterpreter();

        for (int k=0;k<nnbl;k++) {
            nbl[k].sortimentsBM=0.0;
            nbl[k].firewoodBM = 0.0;
            nbl[k].restwoodBM = 0.0;
            for (int i=0;i<st.ntrees;i++)
                if ( st.tr[i].out==nbl[k].year && st.tr[i].out>1) {
                    double vol = fi.getValueForTree(st.tr[i],nbs[st.tr[i].sp.spDef.internalCode].stemVolumeFunction );
                    double volSortimente =0.0;
                    double volFirewood=0.0;
                    double volRestwood=0.0;
// Sortimente
                    if(nbl[k].sortiments){
                       double startHeight=0.3;
                       for (int j=0;j<nausgewaehlt;j++) {
                          double ran = Math.random() * 100.0;
                          if (st.tr[i].code >= ls[j].artvon && st.tr[i].code <= ls[j].artbis && ran <= ls[j].wahrscheinlich){
                            boolean logFound = true;
                            double endHeight = st.tr[i].h;
                            if (ls[j].bisKronenansatz) endHeight = st.tr[i].cb;
                            boolean logOk = true;
                            if (ls[j].nurZBaum && st.tr[i].crop == false) logOk = false;
                            while(logFound && logOk) {
                               logFound = sortierer.getAssortment(nbs[st.tr[i].sp.spDef.internalCode].taperFunctionNumber , st.tr[i].d, 1.3, 0.0, 0.0, st.tr[i].h,
                                    startHeight, endHeight, ls[j].minD, ls[j].maxD, ls[j].minTop, ls[j].maxTop,
                                    ls[j].minH, ls[j].maxH, 0.0, ls[j].zugabeProzent, ls[j].zugabeCm);
                                if(logFound) {
                                   if (ls[j].entnahme) volSortimente = volSortimente+sortierer.getAVolmR_m3();
                                   startHeight=startHeight + sortierer.getALae_m();
                                }
                               if (ls[j].mehrfach == false) logFound = false; //Abbruch
                            }// while log found

                           } // Baumart
                        }   // for j
                       nbl[k].sortimentsBM = nbl[k].sortimentsBM + 
                               fi.getValueForTree(st.tr[i],nbs[st.tr[i].sp.spDef.internalCode].woodDensity)*volSortimente*st.tr[i].fac/st.size;
                    }
// Ende der Sortimente
                    if (nbl[k].firewood){
                        if (vol - volSortimente > 0.0) volFirewood = vol - volSortimente;
                        nbl[k].firewoodBM = nbl[k].firewoodBM +
                                fi.getValueForTree(st.tr[i],nbs[st.tr[i].sp.spDef.internalCode].woodDensity)*volFirewood*st.tr[i].fac/st.size;
                    }
                    if (nbl[k].restwood){
                        volRestwood = vol - volSortimente - volFirewood;
                        nbl[k].restwoodBM = nbl[k].restwoodBM + 
                                fi.getValueForTree(st.tr[i],nbs[st.tr[i].sp.spDef.internalCode].woodDensity)*volRestwood*st.tr[i].fac/st.size;
                        nbl[k].restwoodBM = nbl[k].restwoodBM +
                                fi.getValueForTree(st.tr[i],nbs[st.tr[i].sp.spDef.internalCode].branchBM)*st.tr[i].fac/st.size;
                    }


                }

        }

    loadTableBM(st);

    }

    public void loadnbs(URL url){
        nnbs=0;
        try {
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());

         DocType docType = doc.getDocType();
//
         Element sets =  doc.getRootElement();
         List setList = sets.getChildren("Species");
         Iterator i = setList.iterator();

         while (i.hasNext()) {
            Element set = (Element) i.next();
            String codelist = set.getChild("Specieslist").getText();
            int codex = Integer.parseInt(set.getChild("Code").getText());

            boolean load = false;
            for (int j=0; j < st.nspecies;j++){
                String codestr= new Integer(st.sp[j].code).toString();
                if (codelist.indexOf(codestr)>-1) {
                    load=true;
                    st.sp[j].spDef.internalCode=nnbs;
                }
            }
            if (load) {
                 nbs[nnbs] = new NutrientBalanceSetting();
                 nbs[nnbs].code=codex;
                 nbs[nnbs].specieslist=codelist;
                 nbs[nnbs].leafBM=set.getChild("LeafBM").getText();
                 nbs[nnbs].branchBM=set.getChild("BranchBM").getText();
                 nbs[nnbs].branchFacCa=set.getChild("BranchFacCa").getText();
                 nbs[nnbs].branchFacK=set.getChild("BranchFacK").getText();
                 nbs[nnbs].branchFacMg=set.getChild("BranchFacMg").getText();
                 nbs[nnbs].leafFacCa=set.getChild("LeafFacCa").getText();
                 nbs[nnbs].leafFacK=set.getChild("LeafFacK").getText();
                 nbs[nnbs].leafFacMg=set.getChild("LeafFacMg").getText();
                 nbs[nnbs].woodFacCa=set.getChild("WoodFacCa").getText();
                 nbs[nnbs].woodFacK=set.getChild("WoodFacK").getText();
                 nbs[nnbs].woodFacMg=set.getChild("WoodFacMg").getText();
                 nbs[nnbs].woodDensity=set.getChild("WoodDensity").getText();
                 nbs[nnbs].stemVolumeFunction=set.getChild("StemVolume").getText();
                 nbs[nnbs].taperFuctionClass=set.getChild("TaperClass").getText();
                 nbs[nnbs].taperFunctionNumber=Integer.parseInt(set.getChild("TaperFunctionNumber").getText());
                 nnbs = nnbs +1;
             }
            }

       } catch (Exception e) {e.printStackTrace();}

}


    public void loadls(URL url){
        nls=0;
        combo5Active=false;
        combo5Active=true;
        try {
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());
         
         DocType docType = doc.getDocType();
//        
         Element sortimente =  doc.getRootElement();  
         List Sortiment = sortimente.getChildren("Sortiment");
         Iterator i = Sortiment.iterator();
         
         while (i.hasNext()) {
            Element sortiment = (Element) i.next();
            ls[nls] = new LoggingSortiment(sortiment.getChild("Name").getText(),
                    Integer.parseInt(sortiment.getChild("Art_von").getText()),Integer.parseInt(sortiment.getChild("Art_bis").getText()),
                    Double.parseDouble(sortiment.getChild("minD").getText()),Double.parseDouble(sortiment.getChild("maxD").getText()),
                    Double.parseDouble(sortiment.getChild("minTop").getText()),Double.parseDouble(sortiment.getChild("maxTop").getText()),
                    Double.parseDouble(sortiment.getChild("minH").getText()),Double.parseDouble(sortiment.getChild("maxH").getText()),
                    Double.parseDouble(sortiment.getChild("ZugabeProzent").getText()),Double.parseDouble(sortiment.getChild("ZugabeCm").getText()),
                    Double.parseDouble(sortiment.getChild("Preis").getText()),Double.parseDouble(sortiment.getChild("Gewicht").getText()),
                    Double.parseDouble(sortiment.getChild("Wahrscheinlichkeit").getText()),
                    Boolean.parseBoolean(sortiment.getChild("nurZBaum").getText()),
                    Boolean.parseBoolean(sortiment.getChild("mehrfach").getText()),
                    Boolean.parseBoolean(sortiment.getChild("Entnahme").getText()),
                    Boolean.parseBoolean(sortiment.getChild("bisKA").getText()),
                    Boolean.parseBoolean(sortiment.getChild("ausgewaehlt").getText()),
                    nls,Integer.parseInt(sortiment.getChild("Zeitbedarfsfunktion").getText())
                    );
            listModel.addElement((String) ls[nls].name);
            nlist = nlist + 1;
            nls = nls +1;
         } 

       } catch (Exception e) {e.printStackTrace();}
       
}

    public void loadtef(URL url){
        try {
         SAXBuilder builder = new SAXBuilder();
         URLConnection urlcon = url.openConnection();

         Document doc = builder.build(urlcon.getInputStream());

         DocType docType = doc.getDocType();
//
         Element functions =  doc.getRootElement();
         List Function = functions.getChildren("ooo_row");
         Iterator i = Function.iterator();

         while (i.hasNext()) {
            Element function = (Element) i.next();
            tef[ntef] = new TimeEstimateFunction(Integer.parseInt(function.getChild("id").getText()),
                    function.getChild("Baumartengruppe").getText() ,
                    function.getChild("Sortiment").getText() ,
                    function.getChild("Taetigkeit").getText() ,
                    Integer.parseInt(function.getChild("Min_Mittendurchmesser").getText().trim()),
                    Integer.parseInt(function.getChild("Max_Mittendurchmesser").getText().trim()),
                    Double.parseDouble(function.getChild("a").getText().trim()),
                    Double.parseDouble(function.getChild("b").getText().trim()),
                    Double.parseDouble(function.getChild("c").getText().trim())
                    );
            ntef=ntef+1;
         }

       } catch (Exception e) {e.printStackTrace();}


}
//
    private void loadTableBM(Stand st){
        for (int i=0;i<nnbl;i++){
            jTable3.setValueAt(nbl[i].year, i, 0);
            jTable3.setValueAt(nbl[i].sortimentsBM, i, 1);
            jTable3.setValueAt(nbl[i].firewoodBM, i, 2);
            jTable3.setValueAt(nbl[i].restwoodBM, i, 3);
            }
    }


//
    private void loadTableDf(Stand st){
        int dfjahr = -99;
        int ndf =0;
        do {
           int minj = 9999;
           for (int i=0;i<st.ntrees;i++)
               if (st.tr[i].out < minj && st.tr[i].out > dfjahr ) minj=st.tr[i].out;
           dfjahr = minj;
           Double vHardwood =0.0;
           Double vConifer =0.0;
           if (dfjahr >0 && dfjahr<9000){
              for (int i=0;i < st.ntrees;i++)
                  if (st.tr[i].out ==dfjahr){
                      if (st.tr[i].code <500) vHardwood=vHardwood+st.tr[i].v*st.tr[i].fac;
                      else vConifer=vConifer+st.tr[i].v*st.tr[i].fac;
                  }
            vHardwood = vHardwood/st.size;
            vConifer  = vConifer/st.size;
            nbl[nnbl] = new NutrientBalanceLine();
            nbl[nnbl].year=dfjahr;
            nbl[nnbl].cutVolume=vHardwood +vConifer;
            jTable1.setValueAt(dfjahr, ndf, 0);
            jTable1.setValueAt(vHardwood.toString(),ndf, 1);
            jTable1.setValueAt(vConifer.toString(), ndf, 2);
            jTable1.setValueAt(true, ndf, 3);
            jTable1.setValueAt(false, ndf, 4);
            jTable1.setValueAt(false, ndf, 5);
            nnbl=nnbl+1;
            ndf = ndf +1;
            }
        }
        while (dfjahr < st.year);
    }

    private void getTableDfSetting(){
        for (int i=0;i < nnbl;i++){
            nbl[i].sortiments = (Boolean) jTable1.getValueAt(i, 3);
            nbl[i].firewood = (Boolean) jTable1.getValueAt(i, 4);
            nbl[i].restwood = (Boolean) jTable1.getValueAt(i, 5);
        }

    }

    private void loadTableAssortment(Stand st){
// Assortments which do not belong to species
        for (int i=0; i < nls; i++){
            boolean skip = true;
            for (int j=0;j<st.nspecies;j++){
                if (st.sp[j].code >= ls[i].artvon && st.sp[j].code <= ls[i].artbis)
                    skip = false;
            }
            while (skip  && i < nls) {
                for (int j=i; j< nls-1; j++) ls[j]=ls[j+1];
                nls = nls -1;
            }
        }
        for (int i=0; i < nls; i++){
            ls[i].ausgewaehlt=true;
            jTable2.setValueAt(ls[i].ausgewaehlt,i,0);
            jTable2.setValueAt(ls[i].name, i, 1);
            jTable2.setValueAt(ls[i].artvon+"-"+ls[i].artbis,i,2);
            jTable2.setValueAt(ls[i].minTop, i, 3);
            jTable2.setValueAt(ls[i].minD, i, 4);
            jTable2.setValueAt(ls[i].maxH, i, 5);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField13;
    // End of variables declaration//GEN-END:variables
    
}

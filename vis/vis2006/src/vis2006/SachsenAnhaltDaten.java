/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SachsenAnhaltDaten.java
 *
 * Created on 18.01.2010, 11:51:11
 */

package vis2006;
import Hilfsklassen.Kreuzkluppung;

import javax.swing.JOptionPane;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.StringTokenizer;
import DatabaseManagement.DBConnection;
import java.sql.DatabaseMetaData;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;



/**
 *
 * @author sprauer
 */
public class SachsenAnhaltDaten extends javax.swing.JDialog {
    String pfad = "";
    String ordner = "";
    DBConnection dbconn = null;
    String edvid6 = "";
    String saID = null;
    String status = "ok";
    HashMap arten = new HashMap<String, Integer>();

    /** Creates new form SachsenAnhaltDaten */
    public SachsenAnhaltDaten(java.awt.Frame parent, boolean modal, String Pfad,
            String Edvid6, DBConnection Con) {
        super(parent, modal);
        initComponents();
        pfad = Pfad;
        edvid6 = Edvid6;
        dbconn = Con;      
        
        // Artenschlüssel einlesen
        BufferedReader in = null;
        StringTokenizer tok = null;
        System.out.println("Leer los tipos de llave");
        try{
            in=new BufferedReader(new InputStreamReader(
                new FileInputStream(pfad+System.getProperty("file.separator")+"ArtenschlüsselST.txt")));
            boolean weiter = true;
            while(weiter){
                String s =in.readLine();
                if(s != null){
                    tok = new java.util.StringTokenizer(s, ";");
                    int code = Integer.parseInt(tok.nextToken());
                    String kurzST = tok.nextToken();
                    kurzST = kurzST.substring(1, kurzST.length()-1); //" wegschneiden
                    System.out.println("Art "+kurzST);
                    arten.put(kurzST, code);
                } else weiter = false;
            }
       } catch (Exception ex){
           ex.printStackTrace();
           status = "Error al leer los tipos de llave!";
           JOptionPane.showMessageDialog (this, status, "Nota", JOptionPane.INFORMATION_MESSAGE);
       } finally { 
           try{
               in.close();
           }catch(Exception ex){ex.printStackTrace();}
       }
       
       setVisible(true);
    }

    public String getPfad(){
        return ordner;
    }

    public String getMeldung(){
        return status;
    }

    public boolean isInteger( String input ){
        try{
            Integer.parseInt( input );
            return true;
        } catch(Exception e){
            return false;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lectura de datos de Sachsen-Anhalt");

        jLabel2.setText("Sachsen-Anhalt ID");

        jButton2.setText("lectura");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Parcela");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(194, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(160, 160, 160))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // einlesen
        String parz = "";
        int auf = 1;

        // Eingabewerte setzen
        saID = jTextField2.getText().trim();
        parz = jTextField3.getText().trim();
        if (parz.length() < 2) parz = "0" + parz.trim();
        if(!isInteger(parz)) status = "Identificación incorrecta de la parcela!";
        
        // Vorbereitung zur Berechnung von Kreuzkluppwerten
        Kreuzkluppung krzklupp = new Kreuzkluppung();

        if (saID != null && status.equals("ok")) {

            // Einzulesende Tabellen
            String[] tabellen = new String[10];
            int ntab = 0;
            ResultSet resultSet = null;
            int nVorauf = 0;
            try{
               DatabaseMetaData dbmd = dbconn.Connections[0].getMetaData();
               String[] typ = {"TABLE"};
               resultSet =  dbmd.getTables(null, null, saID+"%", typ);
               while (resultSet.next()) {
                   tabellen[ntab] = resultSet.getString(3);
                   ntab++;
               }
            }catch (Exception ex){
                status = "Error al listar el analisis de tablas";
                JOptionPane.showMessageDialog (this, status, "Nota", JOptionPane.INFORMATION_MESSAGE);
                ex.printStackTrace();
            }finally{
                try{
                    if(resultSet != null) resultSet.close();                    
                }catch (Exception ex){ex.printStackTrace();}
            }

            // Schleife über alle einzulesenden Tabellen
            for(int j = 0; j < ntab; j++){
                nVorauf = 0;
                Statement stmt2 = null; // zum Schreiben
                Statement stmt3 = null;
                ResultSet rs3 = null;
                Statement stmt4 = null;
                ResultSet rs4 = null;
                HashMap vorauf = new HashMap<String, Integer>();
                try {
                    // Nebenaufnahmen (Stubben)
                    // Aufnahmedaten/Flächengrößen einheitlich? -> noch einbauen
                    stmt3 = dbconn.Connections[0].createStatement();
                    rs3 = stmt3.executeQuery("SELECT DISTINCT trim(BST1) as Status FROM " + tabellen[j] + " WHERE LEFT(TRIM(BST1),1) IN ('D') "
                            + "AND len(TRIM(BST1))=3 AND RIGHT(TRIM(BST1),2) BETWEEN 0 AND 99 ORDER BY trim(BST1)"); // Funktioniert nur solange die Dfs nicht nach 2000 stattfanden
                    while (rs3.next()) {
                        nVorauf++;
                        String dfJahr = "";
                        Object dfJahrobj = rs3.getObject("Status");
                        if (dfJahrobj != null) {
                            dfJahr = dfJahrobj.toString().trim();
                        }
                        dfJahr = dfJahr.substring(1);   // Jahr nur zweistellig
                        vorauf.put(dfJahr, nVorauf);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (rs3 != null)rs3.close();
                        if (stmt3 != null) stmt3.close();
                    } catch (Exception e) {e.printStackTrace();}
                }
                try {
                    if (nVorauf > 0) {
                        stmt2 = dbconn.Connections[0].createStatement();
                        stmt4 = dbconn.Connections[0].createStatement();
                        rs4 = stmt4.executeQuery("SELECT * FROM " + tabellen[j] + " WHERE  LEFT(TRIM(BST1),1) IN ('D') "
                                + "AND len(TRIM(BST1))=3 AND RIGHT(TRIM(BST1),2) BETWEEN 0 AND 99;");
                        double flaeche = 0.0;
                        while (rs4.next()) {
                            if (flaeche == 0) {
                                flaeche = rs4.getInt("FLG") / 10000.0;
                            }
                            String a = "D";
                            String dfJahr = "";
                            Object dfJahrobj = rs4.getObject("BST1");
                            if (dfJahrobj != null) {
                                dfJahr = dfJahrobj.toString().trim().substring(1);
                            }
                            String nr = "onum";
                            Object nrobj = rs4.getObject("NR");
                            if (nrobj != null) {
                                nr = String.valueOf(((Double) nrobj).intValue());
                            }
                            String arts = "";
                            Object artobj = rs4.getObject("BAUM");
                            if (artobj != null) {
                                arts = artobj.toString().trim();
                            }
                            int art = 0; 
                            if(!arts.equals("")){
                                int code = (Integer)arten.get(arts);
                                if(code > 0) art = code;
                                else {
                                    System.out.println("Tipo desconocido: " + art);
                                    status = "Tipo desconocido: " + art;
                                    JOptionPane.showMessageDialog (this, status, "Nota", JOptionPane.INFORMATION_MESSAGE);
                                }
                            }

                            double alt = rs4.getDouble("AL1");
                            int d1 = rs4.getInt("D11");
                            int d2 = rs4.getInt("D21");
                            int d = krzklupp.dBerechnen(d1, d2);
                            //System.out.println("Kreuzkluppunkg: " + d1 + " " + d2 + " > " + d);
                            int h = rs4.getInt("H1");

                            int aufVor = ((Integer) (vorauf.get(dfJahr))).intValue();

                            //System.out.println("Baum " + nr + " (" + aufVor + ") d1= " + d1);
                            String spalten = "edvid, auf, nr, nralt, art, anzahl, repfl, alt, "
                                    + "r, zf, ou, schicht, sonder, kraft, dkrz1, dkrz2, dmess, mh, d, a, e, h, k, hbr, "
                                    + "g0, g5, g10, g15, g20, g25, g30, g35, hmaxkb, hastfrei, sfe, sfg, bemerk";
                            String werte = "'" + edvid6+parz + "'," + aufVor + ",'" + nr + "',''," + art + ",1,1,"
                                    + alt + ",'','','',-1,'',0," + d1 + "," + d2 + "," + d + ",13,0,'" + a + "',''," + h + ",0,0,"
                                    + "0,0,0,0,0,0,0,0,0,0,0,0,''";
                            stmt2.executeUpdate("INSERT INTO Baum (" + spalten + ") VALUES(" + werte + ")");
                        }
                        // Aufnahmedaten einfügen
                        for (int i = 0; i < nVorauf; i++) {
                            String aufJahr = "";
                            Collection jahre = vorauf.keySet();
                            Iterator it = jahre.iterator();
                            while (it.hasNext()) {
                                String jahr = it.next().toString();
                                if (vorauf.get(jahr).toString().equals(String.valueOf(auf))) {
                                    aufJahr = jahr;
                                }
                            }
                            String aufStr = String.valueOf(auf);
                            if (aufStr.length() < 2) aufStr = "0" + aufStr;
                            String aufid = edvid6 + parz + aufStr;

                            //System.out.println("INSERT INTO Auf(id, edvid, auf, monat, jahr, flha," +
                            //        "qualitat, typ, messh, repfac, bemerk, PZ) " +
                            //        "VALUES('"+aufid+"','"+edvid+"',"+auf+",0,'"+aufJahr+"','"+ha+"','','N','','','Sachsen-Anhalt-Daten',0);");
                           stmt2.executeUpdate("INSERT INTO Auf(id, edvid, auf, monat, jahr, flha,"
                                    + "qualitat, typ, messh, repfac, bemerk, PZ) "
                                    + "VALUES('" + aufid + "','" + edvid6+parz + "'," + auf + ",0,'" + aufJahr + "'," + flaeche + ", -1,'N','','','Daten Sachsen-Anhalt',0);");
                            auf++;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    status = "Errores en las grabaciones anteriores";
                    JOptionPane.showMessageDialog (this, status, "Nota", JOptionPane.INFORMATION_MESSAGE);
                } finally {
                    try {
                        
                        if (rs4 != null)rs4.close();
                        if (stmt4 != null) stmt4.close();
                        if (stmt2 != null) stmt2.close();
                    } catch (Exception e) {e.printStackTrace();}
                }

                // Reguläre Aufnahmen
                Statement stmt = null;
                ResultSet rs = null;
                int startAuf = auf;
                try {
                    stmt2 = dbconn.Connections[0].createStatement();
                    stmt = dbconn.Connections[0].createStatement();
                    rs = stmt.executeQuery("SELECT * FROM " + tabellen[j] + " WHERE NOT (LEFT(TRIM(BST1),1) IN ('D') "
                            + "AND len(TRIM(BST1))=3 AND RIGHT(TRIM(BST1),2) BETWEEN 0 AND 99) or BST1 IS NULL;");
                    boolean aufSchreiben = true;  //
                    double flaeche = 0.0;
                    while (rs.next()) {
                        auf = startAuf;  // Aufnahme für jeden Baum zurücksetzen
                        if (flaeche == 0.0) {
                            flaeche = rs.getInt("FLG") / 10000.0;
                        }
                        String nr = "onum";
                        Object nrobj = rs.getObject("NR");
                        if (nrobj != null) {
                            nr = String.valueOf(((Double) nrobj).intValue());
                        }
                        String arts = "";
                        Object artobj = rs.getObject("BAUM");
                        if (artobj != null) {
                            arts = artobj.toString().trim();
                        }
                        int art = 0;              
                        if(!arts.equals("")){
                            int code = (Integer)arten.get(arts);
                            if(code > 0) art = code;
                            else {
                            System.out.println("Tipo desconocido: " + art);
                            status = "Tipo desconocido: " + art;
                            JOptionPane.showMessageDialog (this, status, "Nota", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } 
                        double alt = 0.0;
                        String bstat = null;
                        String bstatorg = null;
                        String a = null;
                        String ou = "";
                        String zf = "";
                        String bemerk = null;
                        int d1 = 0;
                        int d2 = 0;
                        int d = 0;
                        int h = 0;
                        HashSet<String> ab = new HashSet<String>();
                        ab.add("D"); ab.add("L"); ab.add("A"); ab.add("W"); ab.add("R"); ab.add("T");
                        ab.add("M"); ab.add("O");

                        for (int i = 1; i < 6; i++) {   // max 5 Aufnahmen
                            // Baumdaten einfügen
                            alt = rs.getDouble("AL" + i);
                            // Baumstatus bearbeiten
                            bstat = "";
                            a = "";
                            bemerk = "";
                            Object bstobj = rs.getObject("BST" + i);
                            if (bstobj != null){
                                bstat = bstobj.toString().trim();
                                bstatorg = bstat;
                                char ersteStelle = ' ';
                                if (bstat.length()>0) ersteStelle = bstat.charAt(0);
                                //Ausscheidend
                                if(ab.contains(String.valueOf(ersteStelle))) {
                                    bstat = bstat.substring(1);
                                    switch(ersteStelle){
                                        case ' ': 
                                            break;
                                        case 'L':
                                            a = "D";
                                            bemerk = bemerk+" Adelgazamiento del tronco del arbol ";
                                            break;
                                        case 'D':
                                            a = "D"; break;
                                        case 'A':
                                            a = "1"; break;
                                        case 'W':
                                            a = "W"; break;
                                        case 'R':
                                            a = "1"; break;
                                        case 'T':
                                            a = "T"; break;
                                        case 'M':
                                            a = "1"; break;
                                        case 'O':
                                            a = "D";
                                            bemerk = "Stubben";
                                            break;
                                    }
                                }
                                if(bstat.contains("B")){
                                    bemerk = bemerk + " inventario dominado";
                                    ou = "U";
                                    bstat = bstat.replace("B", "");
                                }
                                if(bstat.contains("H")){
                                    ou = "O";
                                    bstat = bstat.replace("H", "");
                                }
                                if(bstat.contains("U")){
                                    bemerk = bemerk + " Abrigo";
                                    ou = "U";
                                    bstat = bstat.replace("U", "");
                                }
                                if(bstat.contains("Z")){
                                    zf = "Z";
                                    bstat = bstat.replace("Z", "");
                                }
                                if(bstat.contains("F")){
                                    zf = "F";
                                    bstat = bstat.replace("F", "");
                                }
                                if(bstat.contains("K")){
                                    bemerk = bemerk+" Arbol de competencia (Adversario)";
                                    bstat = bstat.replace("K", "");
                                }
                                if(bstat.contains("Y")){
                                    bemerk = bemerk+" Zwiesel";
                                    bstat = bstat.replace("Y", "");
                                }
                                if(bstat.contains("wr")){
                                    bemerk = bemerk+" Agua reiser";
                                    bstat = bstat.replace("wr", "");
                                }
                                if(bstat.contains("kr")){
                                    bemerk = bemerk+" enfermo";
                                    bstat = bstat.replace("dr", "");
                                }
                                if(bstat.contains("dw")){
                                    bemerk = bemerk+" Interlocked";
                                    bstat = bstat.replace("dw", "");
                                }
                                if(bstat.contains("fr")){
                                    bemerk = bemerk+" Escarcha agrietada";
                                    bstat = bstat.replace("fr", "");
                                }
                                if(bstat.contains("s")){
                                    bemerk = bemerk+" pelada";
                                    bstat = bstat.replace("s", "");
                                }
                                bstat = bstat.trim();
                                if(bstat.contains(",")) bstat = bstat.replace(",", "");
                                if(bstat.contains("V")) bstat = bstat.replace("V", "");
                                if(bstat.length()>0){
                                    status = "Entrada desconocida en la columna BST";
                                    System.out.println("Entrada desconocida en la columna BST"+i+" " +
                                            "(Tabla "+tabellen[j]+"): "+ bstatorg);
                                    JOptionPane.showMessageDialog (this, status, "Nota", JOptionPane.INFORMATION_MESSAGE);
                                    
                                }
                            }
                      
                            d1 = rs.getInt("D1" + i);
                            d2 = rs.getInt("D2" + i);
                            d = krzklupp.dBerechnen(d1, d2);
                            //System.out.println("Kreuzkluppunkg: " + d1 + " " + d2 + " > " + d);
                            h = rs.getInt("H" + i);
                            if (d1 > 0 || d2 > 0 || bstobj != null) {
                                System.out.println("Baum " + nr + " (" + auf + ") d1= " + d1);
                                String spalten = "edvid, auf, nr, nralt, art, anzahl, repfl, alt, "
                                        + "r, zf, ou, schicht, sonder, kraft, dkrz1, dkrz2, dmess, mh, d, a, e, h, k, hbr, "
                                        + "g0, g5, g10, g15, g20, g25, g30, g35, hmaxkb, hastfrei, sfe, sfg, bemerk";
                                String werte = "'" + edvid6+parz + "'," + auf + ",'" + nr + "',''," + art + ",1,1,"
                                        + alt + ",'','"+zf+"','"+ou+"',-1,'',0," + d1 + "," + d2 + "," + d + ",13,0,'" + a + "',''," + h + ",0,0,"
                                        + "0,0,0,0,0,0,0,0,0,0,0,0,'"+bemerk+"'";
                                stmt2.executeUpdate("INSERT INTO Baum (" + spalten + ") VALUES(" + werte + ")");
                            }

                            // Aufnahmedaten schreiben
                            java.util.Date datum = rs.getDate("DATUM" + i);
                            if (aufSchreiben && datum != null) {
                                Calendar kal = Calendar.getInstance();
                                kal.setTime(datum);
                                int aufMonat = kal.get(Calendar.MONTH) + 1;
                                int aufJahr = kal.get(Calendar.YEAR);
                                String aufStr = String.valueOf(auf);
                                if (aufStr.length() < 2) {
                                    aufStr = "0" + aufStr;
                                }
                                String aufid = edvid6 + parz + aufStr;

                                stmt2.executeUpdate("INSERT INTO Auf(id, edvid, auf, monat, jahr, flha,"
                                        + "qualitat, typ, messh, repfac, bemerk, PZ) "
                                        + "VALUES('" + aufid + "','" + edvid6+parz + "'," + auf + "," + aufMonat + ",'"
                                        + aufJahr + "'," + flaeche + ", -1,'H','','','Daten Sachsen-Anhalt',0);");
                            }
                            auf++;
                        }
                        aufSchreiben = false;
                    }

                    // Parzellendaten einfügen (nur für die erste Tabelle)
                    if (j==0) {
                        stmt2.execute("INSERT INTO Parz(id, edvid , parzelle, bhdfile, hohfile, "
                                + "insfile, behandl, flache, bemerk, stand, bearbeiter, stvp, nkro, PZ) "
                                + "VALUES('" + edvid6 + parz + "','" + edvid6 + "','" + parz + "','', 0, '',"
                                + " '','', '', '',  '', 0, 0, 0)");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (rs != null) rs.close();
                        if (stmt != null) stmt.close();
                        if (stmt2 != null) stmt2.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        }   
        this.dispose();

    }//GEN-LAST:event_jButton2ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}

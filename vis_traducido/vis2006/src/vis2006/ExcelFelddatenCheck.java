/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExcelFelddatenCheck.java
 *
 * Created on 04.01.2010, 09:25:46
 */

package vis2006;

import Hilfsklassen.ExcelFileFilter;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import java.io.PrintWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author sprauer
 */
public class ExcelFelddatenCheck extends javax.swing.JDialog {
    String pfad = null;
    String fehler = null;
    int maxDzuwachs = 50;  // Voreinstellung 5 cm
    int maxHzuwachs = 50;   // Voreinstellung 5 m

    /** Creates new form ExcelFelddatenCheck */
    public ExcelFelddatenCheck(java.awt.Frame parent, boolean modal, String ePfad) {
        super(parent, modal);
        initComponents();
        pfad = ePfad;
        jTextField1.setText(pfad);
        jTextField2.setText(String.valueOf(maxDzuwachs));
        jTextField3.setText(String.valueOf(maxHzuwachs));
        setVisible(true);
    }

    public String getPfad(){
        return pfad;
    }

    public String getFehler(){
        return fehler;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Seleccionar archivo de datos de campo Excel");

        jTextField1.setText("jTextField1");

        jButton1.setText("browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("check");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("maximo incremento en diámetro");

        jTextField2.setText("jTextField2");

        jLabel3.setText("maximo crecimiento de altura");

        jTextField3.setText("jTextField3");

        jLabel4.setText("mm");

        jLabel5.setText("dm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(51, 51, 51)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(261, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(246, 246, 246))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addContainerGap(319, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Felddatendatei wählen (browse)
        JFileChooser fc = new JFileChooser(pfad);
        fc.setDialogTitle(" Seleccionar archivo de Excel ");
        fc.setApproveButtonText("Controlar");
        ExcelFileFilter eff = new ExcelFileFilter();
        fc.addChoosableFileFilter(eff); // nur Excel-Dateien (.xls) und Verzeichnisse

        fc.showOpenDialog(this);
        File inputFile = fc.getSelectedFile();
        String exten = eff.getExtension(inputFile);
        if ("xls".equals(exten))
            pfad = inputFile.getAbsolutePath();
        else System.out.println("Seleccionar archivo de Excel. Otros formatos inadmisibles!");
        jTextField1.setText(pfad);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Check
        fehler = "";
        boolean strukturOk = false;
        InputStream input=null;
        String filename="ExcelCheckReport.htm";
        int nfehler = 0;
        CheckVisData cvd = new CheckVisData();

        try{
            // Grenzwert für Zuwachskontrolle
            pfad = jTextField1.getText().trim();
            maxDzuwachs = Integer.parseInt(jTextField2.getText().trim());
            maxHzuwachs = Integer.parseInt(jTextField3.getText().trim());

            input = new FileInputStream(pfad);
            HSSFWorkbook wb = new HSSFWorkbook(input);
            input.close();
            Sheet sheet = wb.getSheetAt(0); // nur das erste Arbeitsblatt
            ExcelBaum eBaum = new ExcelBaum();
            strukturOk = eBaum.setSpaltenordnung(sheet);
            fehler = eBaum.getHinweis();

            PrintWriter out = cvd.createCheckReport(filename, null);

            // Ausgeblendete Spalten?
            boolean ausgeblendet = false;
            int i = 0;
            while(i < eBaum.getMaxAnzahlSpalten() && ausgeblendet == false) {
                System.out.println("Columna " + i);
                ausgeblendet = sheet.isColumnHidden(i);
                i ++;
            }
            if(ausgeblendet) out.println("<TR><TD colspan=2> Mínimo una columna está oculta!</TD></TR>");

            if(strukturOk){
                String fehlerbaum ="";
                String checkEdvid = "";
                boolean edvidFehler = false;
                boolean einlesenAbbrechen = false;
                System.out.println("Numero de Líneas: " +sheet.getLastRowNum());
                for(Row row : sheet){
                    if(row.getRowNum() > 0){ //nur für Datenzeilen (nicht Spaltenüberschriften)
                        if(einlesenAbbrechen) break;
                        fehler = eBaum.zeileLesen(row);
                        if(fehler.length()>0){
                            nfehler = -999;
                            break;
                        }
                        fehlerbaum = " "+eBaum.nr+" ("+eBaum.art+") ";

                        // nicht vollständig leere Zeilen nach Ende der Daten  (20.06.2011)
                        // keine edvid, keine Nr, keine Art, kein Durchmesser -> Zeile wird als leer betrachtet
                        //    und darauffolgende Zeilen werden ignoriert
                        // (s.auch ExcelFelddaten.java Methode uebernehmen)
                        if(eBaum.edvid.equals("") && eBaum.nr.equals("") && eBaum.art<1 && eBaum.dn<1){
                            einlesenAbbrechen = true;
                            String text = "Linea " + (row.getRowNum()+1) + " parece estar vacía.\n"
                                    + "Se ignoran todos los datos existentes en esta línea.";
                            JOptionPane.showMessageDialog(this, text);
                            break;
                        }


                        // Fehlender Durchmesser
                        if(!eBaum.zusatzWerte.containsKey("DDN") && eBaum.dn == 0 && !eBaum.an.equals("F") && eBaum.a2.trim().isEmpty()
                                && eBaum.nr.matches("\\d+\\w*")){
                            nfehler= nfehler+1;
                            out.println("<TR><TD>Diametro no encontrado</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }

                        // Durchmesserzuwachs
                        double dneu = (double)eBaum.dn;
                        if (eBaum.dnk>0) dneu = (dneu+(double)eBaum.dnk)/2;
                        double dalt = (double)eBaum.d2;
                        if (eBaum.dk21+eBaum.dk22 > 0) dalt = (eBaum.dk21 + eBaum.dk22)/2;
                        double zuwachs = dneu - dalt;
                        if(zuwachs <= 0 && (eBaum.d2 > 0 || eBaum.dk21+eBaum.dk22 > 0) && eBaum.dn > 0
                                && !eBaum.bem.contains("BHD!") && !eBaum.an.equals("T")){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Baja/mismo Diámetro</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }
                        if(zuwachs > maxDzuwachs && (eBaum.d2 > 0 || eBaum.dk21+eBaum.dk22 > 0) && eBaum.dn > 0
                                && !eBaum.bem.contains("BHD!")){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Incremento en el diámetro sobre "+maxDzuwachs+" mm</TD><TD> Árbol "+fehlerbaum+"</TD></TR>");
                        }


                        // Höhenzuwachs
                        zuwachs = 0.0;
                        boolean pruefH = false;
                        if(eBaum.h2 > 0 && eBaum.hn > 0 && !eBaum.bem.contains("H!")){
                            zuwachs = eBaum.hn - eBaum.h2;
                            pruefH = true;
                        }
                        if(pruefH && zuwachs <= 0 && !eBaum.an.equals("T")){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Baja/misma altura</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }
                        if(pruefH && zuwachs > maxHzuwachs){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Incremento de altura sobre "+maxHzuwachs+" dm</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }

                        //Kronenansatz
                        if(eBaum.kn > 0 && eBaum.hn>0 && eBaum.kn >= eBaum.hn){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Base de la copa sobre la altura del árbol</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }

                        //Einwachser
                        if(!eBaum.en.trim().isEmpty() && eBaum.alt_en < 1){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Edad de crecimiento no encontrada</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }
                        if(!eBaum.en.trim().isEmpty() && !eBaum.en.trim().equals("e")){
                            nfehler=nfehler+1;
                            out.println("<TR><TD>Entrada ilegal en la columna EN</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }

                        // Verschiedene/fehlende edvids
                        if(eBaum.edvid.equals("")){
                            nfehler++;
                            out.println("<TR><TD>Entrada de edvid no encontrada</TD><TD> Árbol"+fehlerbaum+"</TD></TR>");
                        }
                        if(!checkEdvid.equals("") && !eBaum.edvid.equals("") && !checkEdvid.equals(eBaum.edvid)) edvidFehler = true;
                        checkEdvid = eBaum.edvid;
                    }
                }
                if(edvidFehler){
                    nfehler= nfehler+1;
                    out.println("<TR><TD>Más de una edvid!</TD><TD> </TD></TR>");
                }
            }
            else nfehler = -999; //Wenn Fehler bei Einlesen (Spaltenerkennung)
            System.out.println("Terminado!");
        } catch(Exception e){
            nfehler = -999;
            e.printStackTrace();
        } finally {
            try{
                if(cvd != null)cvd.closeCheckReport();
                if(input != null) input.close();
            } catch(Exception e){e.printStackTrace();}
        }
        if(fehler.length()==0 && strukturOk && nfehler>0){
            try {
                Runtime.getRuntime().exec( " rundll32 url.dll,FileProtocolHandler "+filename);}
            catch ( Exception e){ e.printStackTrace(); }
            fehler = String.valueOf(nfehler);
        }
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}
